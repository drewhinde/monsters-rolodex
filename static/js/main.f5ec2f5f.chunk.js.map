{"version":3,"sources":["components/card/card.component.jsx","components/card-list/card-list.component.jsx","components/search-box/search-box.component.jsx","App.js","reportWebVitals.js","index.js"],"names":["Card","props","imgurl","monster","id","className","src","title","name","alt","email","phone","CardList","monsters","map","SearchBox","type","placeholder","onChange","handleChange","App","e","setState","searchField","target","value","state","fetch","then","response","json","users","this","filteredMonsters","filter","toLowerCase","includes","React","Component","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qTAiBeA,G,kBAdF,SAAAC,GAET,IAAIC,EAAS,wBAA0BD,EAAME,QAAQC,GAAK,yBAE1D,OACI,sBAAKC,UAAU,iBAAf,UACI,qBAAKA,UAAU,aAAaC,IAAKJ,EAAQK,MAAON,EAAME,QAAQK,KAAMC,IAAKR,EAAME,QAAQK,OACvF,6BAAKP,EAAME,QAAQK,OACnB,4BAAIP,EAAME,QAAQO,QAClB,4BAAIT,EAAME,QAAQQ,aCIfC,EAZE,SAAAX,GAEb,OACI,qBAAKI,UAAU,YAAf,SACIJ,EAAMY,SAASC,KAAI,SAAAX,GAAO,OACvB,cAAC,EAAD,CAAuBA,QAASA,GAArBA,EAAQC,UCKnBW,G,MAXG,SAAAd,GACd,OACI,uBACIe,KAAMf,EAAMe,KACZC,YAAahB,EAAMgB,YACnBC,SAAUjB,EAAMkB,aAChBd,UAAU,aCyCPe,E,kDA3Cb,aAAe,IAAD,8BACZ,gBAcFD,aAAe,SAACE,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAbtC,EAAKC,MAAQ,CACVb,SAAS,GACTU,YAAa,IALJ,E,gEASO,IAAD,OAClBI,MAAM,8CACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GAAK,OAAI,EAAKT,SAAS,CAACT,SAAUkB,S,+BAOnC,MAG2BC,KAAKN,MAA/Bb,EAHD,EAGCA,SAAUU,EAHX,EAGWA,YAMbU,EAAmBpB,EAASqB,QAAO,SAAA/B,GAAO,OAC7CA,EAAQK,KAAK2B,cAAcC,SAASb,EAAYY,kBAGlD,OACC,sBAAK9B,UAAW,MAAhB,UACE,kDACA,cAAC,EAAD,CAAWW,KAAK,SAASC,YAAY,kBAAkBE,aAAea,KAAKb,eAC3E,cAAC,EAAD,CAAUN,SAAUoB,W,GAtCTI,IAAMC,WCOTC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBb,MAAK,YAAkD,IAA/Cc,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOF,GACPG,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAQN,OCDdO,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1BZ,M","file":"static/js/main.f5ec2f5f.chunk.js","sourcesContent":["import React from 'react';\r\nimport '../card/card.styles.css';\r\n\r\nconst Card = props => {\r\n\r\n    let imgurl = 'https://robohash.org/' + props.monster.id + '?set=set2&size=180x180';\r\n\r\n    return (\r\n        <div className='card-container'>\r\n            <img className='card-image' src={imgurl} title={props.monster.name} alt={props.monster.name}></img>\r\n            <h2>{props.monster.name}</h2>\r\n            <p>{props.monster.email}</p>\r\n            <p>{props.monster.phone}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Card","import React from 'react'\r\nimport './card-list.styles.css';\r\nimport Card from '../card/card.component';\r\n\r\nconst CardList = props => {\r\n\r\n    return (\r\n        <div className='card-list'>\r\n           {props.monsters.map(monster => \r\n               <Card key={monster.id} monster={monster}></Card>\r\n            )\r\n        }\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CardList","import React from 'react';\r\nimport '../search-box/search-box.styles.css';\r\n\r\nconst SearchBox = props => {\r\n    return (\r\n        <input \r\n            type={props.type} \r\n            placeholder={props.placeholder} \r\n            onChange={props.handleChange} \r\n            className='search' \r\n        />\r\n    )\r\n}\r\n\r\nexport default SearchBox","import React from 'react';\nimport './App.css';\nimport CardList from './components/card-list/card-list.component';\nimport SearchBox from './components/search-box/search-box.component';\n\nclass App extends React.Component {\n\n  constructor() {\n    super();\n    \n    this.state = {\n       monsters:[],\n       searchField: ''\n    };\n  }\n\n  componentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n      .then(response => response.json())\n      .then(users => this.setState({monsters: users}))\n  }\n\n  handleChange = (e) => {\n    this.setState({ searchField: e.target.value });\n  }\n\n  render() {  \n\n    //destructuring\n    const { monsters, searchField } = this.state;\n    /*\n    same as \n    const monsters = this.state.monsters\n    const searchField = this.state.searchField\n    */\n   const filteredMonsters = monsters.filter(monster => \n      monster.name.toLowerCase().includes(searchField.toLowerCase())\n    )\n\n    return (\n     <div className ='App'>\n       <h1>Monsters Rolodex</h1>\n       <SearchBox type='search' placeholder='search monsters' handleChange={ this.handleChange} />\n       <CardList monsters={filteredMonsters} />\n     </div> \n    );\n  }\n  \n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}